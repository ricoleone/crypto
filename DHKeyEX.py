from Crypto.Util.number import *
import random
import base64
from numpy import *
def DHKEexample():
    #ALICE hat
    print("Alice:")
    p = getStrongPrime(512)
    print("Strong Prime p=\n", p)
    a = getRandomRange(2, p-2)
    while GCD(a, p-1) != 1:
        a = getRandomRange(2, p-2)
    print("Alice's private key a=\n", a)
    # print(GCD(a, p-1))
    base = 2
    print("Alice's base g=", base)
    #calculate g^a mod(p)
    A = pow(base, a, p)
    print("Alice's public key A\n", A)
    public_triplet = (p, base, A)

    #BOB hat
    print("Bob:")
    b = getRandomRange(2, p-2)
    while GCD(b, p-1) != 1:
        b = getRandomRange(2, p-2)
    #print(GCD(b, p-1))
    print("Bob's private key b=\n", b)
    #calculate g^b mod(p)
    B = pow(base, b, p)
    print("Bob's public key B\n", B)
    #calculate A^b mod(p)
    BobsK = pow(A, b, p)
    #base^(ab)
    print("Bob's sercet from Alice's public key:\n", BobsK)

    #Alice hat
    #calculate B^a mod(p)
    AlicesK = pow(B, a, p)
    print("Alice's sercet from Bob's public key:\n", AlicesK)
    print("Do Alice and Bob share the secret? ", AlicesK == BobsK)
    #public stuff was (base, p, A, B)
    #private stuff was (a, b, K)

#####################################################################################################################
# Name:        DHgenkeys()
# Description: Returns a DH private/public key pair based the given parameters
# Usage:       b, B = genpublickey(p, g)
# Author:
# Date: 
######################################################################################################################
def DHgenkeys(p, g):
    prvtk = getRandomRange(2, p-2)
    while GCD(prvtk, p-1) != 1:
        prvtk = getRandomRange(2, p-2)
    pblck = pow(g, prvtk, p)
    return prvtk, pblck
#####################################################################################################################
# Name:        DHgensecret()
# Description: Returns a DH secret based the given parameters generated by Bob, where A is Alice's public key
#              b is Bob's private key and p is the shared prime number. Returns A^b mod(p).
# Usage:       B = genpublickey(A, b, p)
# Author:
# Date: 
######################################################################################################################
def DHgensecret(A, b, p):
    return pow(A, b, p)
#####################################################################################################################
# Name:        Kinv()
# Description: calculates K inverse, example from classs Module 5 Lesson 2 part 1
# Usage:       B = genpublickey(A, b, p)
# Author:
# Date: 
######################################################################################################################
def Kinv():
    base, p, A, b, B, K = (2, 10687697916839423481635652118834007146946191294923255999661800948347650137507026580619063362540990142707750877588667878612127060085500161314697355403684817, 2928243870826960095527291341465041733378889438215298802243486942058641990714876730583731143393190263600568508345339395159154963799337791343494391943691343, 3145210314820064242923507206669481373441142139974754058098783378176549671945497998282927729775598688573873767902141750162553709308511659052840059727418475, 243091867572058234977747830694512875533111671243488638254559652058902886471446388452939490802580633118475567282374030327794613305260510150217941576250986, 10641194206677418802665706883329799029279202711791423315137652972422041285490884720641376996879901644227818499713135456300204394885953287489010786875194858)
    kinv_01 = pow(K,p-2,p)
    print("k = ", K)
    print("K inverse 01 = ", kinv_01)
    print("K*kinverse 01 mod(p) = ", (K*kinv_01)%p)
    #kinverse_02 = xgcd(p,K)
    # kinverse_03 = pow(A, p -1 -b)
    # print("K inverse 03 = ", kinverse_03)
    # print("K*kinverse 03 mod(p) = ", (K*kinverse_03)%p)
    
#####################################################################################################################
#
#
#
######################################################################################################################
def safe_prime(bits):
    found_safe_prime = False
    ohshit = 0
    while (not found_safe_prime and ohshit < 1000000):
        ohshit += 1
        q = 2*random.randint(2**(bits-1), 2**(bits))-1
        if random.power_mod(2,2*q, 2*q + 1) != 1:
            continue
        if not q.is_prime(False):
            continue
        found_safe_prime = True
    if ohshit >= 1000000:
        return -1
    return 2*q+1
def main():
    # Check Izzy's public key
    # p = 10675012488470385335680553059341350948539407125891252084806853996618906109827792187832140879977301818484992710410313204152292686706349267855279600518714787
    # g = 2
    # A = 4778933914150623341009953909877531450501667810825151980651468638636019704523535101088742430186729047734730486633516304519334304735838878415297458228065201
    # b, B = DHgenkeys(g, p)
    # print("B=", B)
    # print("Izzy's secret is \n", DHgensecret(A, b, p))
    # DHKEexample()
    # file = open("dh1024.pem")
    # raw = file.read().strip()
    # raw = base64.standard_b64decode(raw)
    # print(raw)
    # print(len(raw))
    # data = raw[6:(6 + 129)]d
    # print("data = \n", data)
    # p = bytes_to_long(data)
    # print(data.hex())
    # print(p)
    Kinv()
    
if __name__ == "__main__":
    main()